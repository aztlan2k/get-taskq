#!/usr/bin/env node --harmony

'use strict';

var reqPromise = require('request-promise');
var blessed = require('blessed');
var contrib = require('blessed-contrib');
var program = require('commander');
//var util = require('util');


var TEST_TASKMANAGER_URL = 'http://localhost:8081/';
var STAGE_TASKMANAGER_URL = process.env.STAGE_TASKMANAGER_URL; // e.g. 'http://192.168.0.1/tasks';
var PROD_TASKMANAGER_URL = process.env.PROD_TASKMANAGER_URL;


program
  .version('0.0.1')
  .option('-t, --test', 'use http://localhost:9999 for testing')
  .option('-p, --production', 'show production task queue [default]')
  .option('-s, --stage', 'show stage task queue')
  .parse(process.argv);


// polling interval
var INTERVAL = 2000;
// columns widths are percent of total screen width
var COLS_WIDTHS = [0.25, 0.10, 0.20, 0.10, 0.10];
var timeoutId;

// task manager url
var TASKMANAGER_URL;
var ENV;
if (program.test) {
  TASKMANAGER_URL = TEST_TASKMANAGER_URL;
  ENV = 'TEST';
} else if (program.stage) {
  TASKMANAGER_URL = STAGE_TASKMANAGER_URL;
  ENV = 'Stage';
} else {
  TASKMANAGER_URL = PROD_TASKMANAGER_URL;
  ENV = 'Production';
}


var tableAttributes = {
  headers: [
    'Studio Name',
    'Studio UID',
    'Task',
    'Status',
    'Runtime (sec)'
  ]
};


var screen = blessed.screen();

var layout = blessed.layout({
  top: 'center',
  left: 'center',
  width: '100%',
  height: '100%',
  padding: {
    left: 1,
    right: 1
  },
  border: 'line',
  style: {
    border: {
      fg: 'blue'
    }
  }
});
screen.append(layout);

var taskTitle = blessed.text({
  bold: true,
  width: '100%-4',
  height: 2,
  tags: true,
  content: `{bold}${ENV} Task Manager Queue{/bold}`,
  fg: 'green',
  padding: {
    bottom: 1
  },
  align: 'center'
});
layout.append(taskTitle);

var taskCount = blessed.text({
  left: 2,
  width: '100%-4',
  height: '5%',
  content: '{green-fg}Total Tasks: {/green-fg} {red-fg,ul}0{/red-fg,ul}',
  tags: true,
  align: 'center'
});
layout.append(taskCount);

var column_widths = COLS_WIDTHS.map((val) => Math.floor(val * screen.width));

var taskTable = contrib.table({
  tags: true,
  keys: true,
  vi: true,
  mouse: false,
  fg: 'white',
  selectedFg: 'white',
  selectedBg: 'blue',
  interactive: true,
  width: '100%-4',
  height: '50%',
  columnSpacing: 10,
  columnWidth: column_widths,
  //border: 'line'  // DEBUG
});
layout.append(taskTable);

var detailView = blessed.text({
  width: '100%',
  height: 10,
  content: 'testing...'
});
layout.append(detailView);


taskTable.on('element select', function(el, item) {
  detailView.setContent(JSON.stringify(item.content));
  screen.render();
//    console.log(
//      '### taskTable select received: item = ' + JSON.stringify(util.inspect(item))  +
//      '; selected = ' + JSON.stringify(util.inspect(index)) +
//      '; el = ' + JSON.stringify(util.inspect(el)));
});



var statusLine = blessed.text({
  bold: true,
  width: '100%-4',
  height: 1,
  tags: true,
  fg: 'red',
  align: 'center'
});
layout.append(statusLine);

// adjust table's height appropriately
taskTable.set('height', '100%-' + (taskTitle.height + taskCount.height + statusLine.height));
taskTable.focus();

screen.key(['escape', 'q', 'C-c'], function(ch) {
  clearTimeout(timeoutId);
  return process.exit(0);
});


function sortByStatus(a, b) {
  if (a.status < b.status)
    return -1;
  if (a.status > b.status)
    return 1;
  return 0;
}

function updateTasks() {
  var request = {
    uri: TASKMANAGER_URL,
    qs: {
      count: 1000
    },
    headers: {
      'User-Agent': 'Request-Promise'
    },
    json: true // Automatically parses the JSON string in the response
  };

  reqPromise(request)
    .then(function (response) {
      var list = response.tasks.map(function(val) {
        var row = [
          val.reporting.studio.name,
          val.reporting.studio.uid,
          val.task,
          val.status,
          val.runtime
        ];
        return row;
      });
      list.sort(sortByStatus);

      detailView.setContent(JSON.stringify(list, null, 2));

      taskTable.setData({
        headers: tableAttributes.headers,
        data: list
      });
      taskCount.setContent(
        `{green-fg}Total Tasks: {/green-fg}{red-fg,ul}${response.count}{/red-fg,ul}`);

      if (statusLine.getContent().length > 0) {
        statusLine.setText('');
      }

      screen.render();
      timeoutId = setTimeout(updateTasks, INTERVAL);
    })
    .catch(function (err) {
      // API call failed...
      taskTable.setData({
        headers: tableAttributes.headers,
        data: []
      });
      statusLine.setContent(`### ERROR: {bold}${err}{/bold}`);

      screen.render();
      timeoutId = setTimeout(updateTasks, INTERVAL);
    });
}

screen.render();

updateTasks();
